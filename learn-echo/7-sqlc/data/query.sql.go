// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (
    first_name,
    last_name
) VALUES (
    $1,
    $2
)
RETURNING id, first_name, last_name
`

type CreateEmployeeParams struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee, arg.FirstName, arg.LastName)
	var i Employee
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, first_name, last_name FROM employees
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, id pgtype.UUID) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, first_name, last_name FROM employees
ORDER BY last_name, first_name
`

func (q *Queries) ListEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.Query(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(&i.ID, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE employees
SET
    first_name = $2,
    last_name = $3
WHERE id = $1
RETURNING id, first_name, last_name
`

type UpdateEmployeeParams struct {
	ID        pgtype.UUID `json:"id"`
	FirstName string      `json:"firstName"`
	LastName  string      `json:"lastName"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.Exec(ctx, updateEmployee, arg.ID, arg.FirstName, arg.LastName)
	return err
}
